name: Amazon Linux 2023 RPM Build (EC2)

on:
  pull_request:
    branches: [ "main" ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

permissions:
  id-token: write
  contents: read

jobs:
  build-rpm-ec2:
    name: Build RPM on Amazon Linux 2023 EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ vars.ACTIONS_IAM_ROLE }}
        aws-region: ${{ vars.S3_REGION }}

    - name: Launch Amazon Linux 2023 EC2 instance
      id: launch_instance
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id "resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64" \
          --instance-type m5dn.12xlarge \
          --iam-instance-profile Name=${{ vars.EC2_INSTANCE_PROFILE_NAME }} \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MountpointS3-RPM-Build}]' \
          --query 'Instances[0].InstanceId' --output text)
        
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
        
        # Wait for SSM registration - keep trying until it works

        echo "Waiting for SSM agent to register..."
        while true; do
          RESULT=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
            --query 'InstanceInformationList[0].InstanceId' --output text 2>/dev/null)
          if [[ "$RESULT" == "$INSTANCE_ID" ]]; then
            echo "SSM agent registered successfully!"
            break
          fi
          echo "SSM not ready yet, waiting 30 seconds..."
          sleep 30
        done

    - name: Extract repository info
      id: repo_info
      run: |
        echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
        echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "ref_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT

    - name: Build RPM on EC2 via SSM
      id: build_rpm
      continue-on-error: true
      run: |
        # Extract values to shell variables
        REPO_URL="https://github.com/${{ steps.repo_info.outputs.repository }}.git"
        COMMIT_SHA="${{ steps.repo_info.outputs.sha }}"
        
        # Copy the existing build logic from amazon_linux_2023_packaging.yml
        CMD_ID=$(aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            \"ls -la | tee -a /tmp/build.log\",
            \"echo Starting dnf update... | tee -a /tmp/build.log\",
            \"dnf -y update 2>&1 | tee -a /tmp/build.log\",
            \"echo Installing packages... | tee -a /tmp/build.log\",
            \"dnf -y install rpm-build rpmdevtools make git mock ca-certificates python3 wget rust cargo 2>&1 | tee -a /tmp/build.log\",
            \"echo Installing cargo about... | tee -a /tmp/build.log\",
            \"cargo install cargo-about 2>&1 | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",
            \"cd /home/ssm-user\",
            \"echo Cloning repository from: $REPO_URL | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",
            \"git clone $REPO_URL repo 2>&1 | tee -a /tmp/build.log\",
            \"echo Checking out commit: $COMMIT_SHA | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",

            \"cd repo && git checkout $COMMIT_SHA 2>&1 | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",

            \"echo Generating spec file... | tee -a /tmp/build.log\",

            \"cd repo/package && python3 generate_spec.py amzn2023 2>&1 | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",
            \"echo Reading version... | tee -a /tmp/build.log\",
            \"cd /home/ssm-user/repo\",
            \"ls -la | tee -a /tmp/build.log\",
            \"VERSION=\$(awk '/^Version:/ {print \$2}' package/amzn2023-packaging.spec)\",
            \"ls -la | tee -a /tmp/build.log\",
            \"echo Building for version: \$VERSION | tee -a /tmp/build.log\",
            \"echo Starting cargo vendor... | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",
            \"cargo vendor 2>&1 | tee -a /tmp/build.log\",
            \"ls -la | tee -a /tmp/build.log\",
            \"echo Generating licenses... | tee -a /tmp/build.log\",
            \"cargo about generate --config package/attribution.toml --output-file THIRD_PARTY_LICENSES package/attribution.hbs 2>&1 | tee -a /tmp/build.log\",
            \"echo Setting up RPM build tree... | tee -a /tmp/build.log\",
            \"rpmdev-setuptree 2>&1 | tee -a /tmp/build.log\",
            \"echo Copying spec and sources... | tee -a /tmp/build.log\",
            \"cp package/amzn2023-packaging.spec ~/rpmbuild/SPECS/ 2>&1 | tee -a /tmp/build.log\",
            \"cp LICENSE NOTICE THIRD_PARTY_LICENSES ~/rpmbuild/SOURCES/ 2>&1 | tee -a /tmp/build.log\",
            \"echo Creating source tarball... | tee -a /tmp/build.log\",
            \"cd .. && tar -czf mountpoint-s3-\${VERSION}.tar.gz repo && cp mountpoint-s3-\${VERSION}.tar.gz /home/ssm-user/rpmbuild/SOURCES/ 2>&1 | tee -a /tmp/build.log\",
            \"echo Building source RPM... | tee -a /tmp/build.log\",
            \"cd /home/ssm-user && rpmbuild -bs ~/rpmbuild/SPECS/amzn2023-packaging.spec 2>&1 | tee -a /tmp/build.log\",
            \"echo Starting mock clean... | tee -a /tmp/build.log\",

            \"sudo mock -r amazonlinux-2023-x86_64 --clean | tee -a /tmp/build.log\",
            \"echo Starting mock  build... | tee -a /tmp/build.log\",

            \"sudo mock -r amazonlinux-2023-x86_64 --rebuild ~/rpmbuild/SRPMS/mount-s3-\${VERSION}-amzn2023.src.rpm 2>&1 | tee -a /tmp/build.log\",
            \"echo Build complete! | tee -a /tmp/build.log\"
          ]" \
          --query 'Command.CommandId' --output text)
        
        # Wait for completion
        while true; do
          STATUS=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$INSTANCE_ID" --query 'Status' --output text 2>/dev/null || echo "Pending")
          [[ "$STATUS" == "Success" ]] && break
          [[ "$STATUS" =~ ^(Failed|Cancelled|TimedOut)$ ]] && exit 1
          sleep 12
        done

    
#
 #   - name: Terminate EC2 instance
 #     if: always()
 #     run: |
 #       aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
 #       aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID" || true
#
    - name: Fail if build failed
      if: steps.build_rpm.outcome == 'failure'
      run: exit 1