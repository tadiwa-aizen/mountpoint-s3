name: Amazon Linux 2023 RPM Build (EC2)

on:
  pull_request:
    branches: [ "main" ]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

permissions:
  id-token: write
  contents: read

jobs:
  build-rpm-ec2:
    name: Build RPM on Amazon Linux 2023 EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: ${{ vars.ACTIONS_IAM_ROLE }}
        aws-region: ${{ vars.S3_REGION }}

    - name: Launch Amazon Linux 2023 EC2 instance
      id: launch_instance
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id "resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64" \
          --instance-type t3.small \
          --iam-instance-profile Name=${{ vars.EC2_INSTANCE_PROFILE_NAME }} \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MountpointS3-RPM-Build}]' \
          --query 'Instances[0].InstanceId' --output text)
        
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
        
        # Wait for SSM
        for i in {1..20}; do
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
            --query 'InstanceInformationList[0].InstanceId' --output text 2>/dev/null && break
          sleep 10
        done

    - name: Build RPM on EC2 via SSM
      id: build_rpm
      continue-on-error: true
      run: |
        # Copy the existing build logic from amazon_linux_2023_packaging.yml
        CMD_ID=$(aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "dnf -y update",
            "dnf -y install rpm-build rpmdevtools make git mock ca-certificates python3 wget rust cargo",
            "cargo install cargo-about",
            "usermod -a -G mock ssm-user",
            "cd /home/ssm-user",
            "git clone https://github.com/${{ github.repository }}.git repo",
            "cd repo && git checkout ${{ github.sha }}",
            "cd package && python3 generate_spec.py amzn2023",
            "cd /home/ssm-user/repo",
            "VERSION=$(awk \"/^Version:/ {print \\$2}\" package/amzn2023-packaging.spec)",
            "cargo vendor",
            "cargo about generate --config package/attribution.toml --output-file THIRD_PARTY_LICENSES package/attribution.hbs",
            "rpmdev-setuptree",
            "cp package/amzn2023-packaging.spec ~/rpmbuild/SPECS/",
            "cp LICENSE NOTICE THIRD_PARTY_LICENSES ~/rpmbuild/SOURCES/",
            "cd .. && tar -czf mountpoint-s3-${VERSION}.tar.gz mountpoint-s3",
            "cp mountpoint-s3-${VERSION}.tar.gz /home/ssm-user/rpmbuild/SOURCES/",
            "cd /home/ssm-user && rpmbuild -bs ~/rpmbuild/SPECS/amzn2023-packaging.spec",
            "sudo mock -r amazonlinux-2023-x86_64 --resultdir ~/mock_results --clean ~/rpmbuild/SRPMS/mount-s3-${VERSION}-amzn2023.src.rpm",
            "sudo mock -r amazonlinux-2023-x86_64 --resultdir ~/mock_results --rebuild ~/rpmbuild/SRPMS/mount-s3-${VERSION}-amzn2023.src.rpm",
            "sudo chown -R ssm-user:ssm-user ~/mock_results",
          ]' \
          --query 'Command.CommandId' --output text)
        
        # Wait for completion
        while true; do
          STATUS=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$INSTANCE_ID" --query 'Status' --output text 2>/dev/null || echo "Pending")
          [[ "$STATUS" == "Success" ]] && break
          [[ "$STATUS" =~ ^(Failed|Cancelled|TimedOut)$ ]] && exit 1
          sleep 12
        done

#    - name: Terminate EC2 instance
#      if: always()
#      run: |
#        aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
#        aws ec2 wait instance-terminated --instance-ids "$INSTANCE_ID" || true

    - name: Fail if build failed
      if: steps.build_rpm.outcome == 'failure'
      run: exit 1